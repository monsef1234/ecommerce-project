generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") 
}

model Product {
  id        Int      @id @default(autoincrement())
  title      String
  price     Float
  description String 
  hasDiscount Boolean @default(false)
  discountPrice Float?
  status Boolean @default(true)
  images    Image[]
  colors    ProductColors[]
  orders    OrderProducts[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")  
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("images")
}

model Color {
  id        Int      @id @default(autoincrement())
  name      String
  code      String
  products  ProductColors[]
  orders    OrderProducts[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("colors")
}

model ProductColors {
  productId Int
  colorId   Int

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade )
  color   Color   @relation(fields: [colorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([productId, colorId])

  @@map("product_colors")
}

model Setting {
  id Int @id @default(autoincrement())
  storeName String
  logoUrl String
  phone String
  phone2 String?
  phone3 String?
  facebook String?
  instagram String?
  twitter String?

  @@map("settings")
}

model Order {
  id Int @id @default(autoincrement())
  fullname String
  phone String
  address String
  delivery String
  status String @default("not_delivered")
  state Json
  total Float
  products OrderProducts[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model OrderProducts {
    orderId Int
    productId Int
    colorId Int
    quantity Int
    price Float
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    color Color @relation(fields: [colorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([orderId, productId, colorId])

    @@map("order_products")
}


